From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ishland <ishlandmc@yeah.net>
Date: Sat, 21 Nov 2020 18:35:43 +0800
Subject: [PATCH] Hotpur Basis


diff --git a/build.gradle b/build.gradle
new file mode 100644
index 0000000000000000000000000000000000000000..6fb295ad61ca05a54488da855f36b5dafa6bddb3
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,85 @@
+import com.ishland.hotpur.gradle.utils.PropertiesUtils
+import org.apache.commons.io.FileUtils
+
+import java.text.SimpleDateFormat
+
+/*
+ * This file was generated by the Gradle 'init' task.
+ */
+
+dependencies {
+    api project(':hotpur-api')
+    api project(":Paper-MojangAPI")
+    api 'io.netty:netty-all:4.1.50.Final'
+    api "io.papermc:minecraft-server:${project.minecraft_version}-SNAPSHOT"
+    api 'org.mozilla:rhino:1.7.7.1'
+    api 'cat.inspiracio:rhino-js-engine:1.7.7.1'
+    api 'net.minecrell:terminalconsoleappender:1.2.0'
+    api 'org.apache.logging.log4j:log4j-core:2.8.1'
+    api 'org.apache.logging.log4j:log4j-iostreams:2.8.1'
+    api 'org.ow2.asm:asm:8.0.1'
+    api 'co.aikar:cleaner:1.0-SNAPSHOT'
+    api 'com.googlecode.json-simple:json-simple:1.1.1'
+    api 'com.velocitypowered:velocity-native:1.1.0-SNAPSHOT'
+    runtimeOnly 'org.jline:jline-terminal-jansi:3.12.1'
+    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.1'
+    runtimeOnly 'com.lmax:disruptor:3.4.2'
+    runtimeOnly 'org.xerial:sqlite-jdbc:3.32.3'
+    runtimeOnly 'mysql:mysql-connector-java:5.1.49'
+    testImplementation 'org.hamcrest:hamcrest-library:1.3'
+    testImplementation 'io.github.classgraph:classgraph:4.8.47'
+}
+
+description = 'Hotpur-Server'
+
+jar {
+    manifest {
+        attributes(
+                'Main-Class': 'org.bukkit.craftbukkit.Main',
+                'Implementation-Title': 'CraftBukkit',
+                'Implementation-Version': rootProject.ext.implementationVersion,
+                'Implementation-Vendor': new Date(),
+                'Specification-Title': 'Bukkit',
+                'Specification-Version': project.api_version,
+                'Specification-Vendor': 'Bukkit Team'
+        )
+        attributes('Sealed': 'true', "net/bukkit/")
+        attributes('Sealed': 'true', "com/bukkit/")
+        attributes('Sealed': 'true', "org/bukkit/")
+    }
+}
+
+processResources {
+    outputs.upToDateWhen {false}
+    doFirst {
+        FileUtils.cleanDirectory(getDestinationDir())
+    }
+    doLast {
+        Properties properties = new Properties();
+        properties.setProperty("ImplementationVersion", rootProject.ext.implementationVersion)
+        properties.setProperty("SpecificationVersion", project.project_version)
+        properties.setProperty("BuildTime", new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'").format(new Date()))
+        PropertiesUtils.saveProperties(properties, getDestinationDir().toPath().resolve("version.properties"), "Hotpur Version File")
+    }
+}
+
+//noinspection UnnecessaryQualifiedReference
+shadowJar {
+    archiveFileName = "hotpur-${project.minecraft_version}.jar"
+    relocate 'jline', 'org.bukkit.craftbukkit.libs.jline'
+    relocate 'org.apache.commons.codec', 'org.bukkit.craftbukkit.libs.org.apache.commons.codec'
+    relocate 'org.apache.commons.io', 'org.bukkit.craftbukkit.libs.org.apache.commons.io'
+    relocate 'org.apache.commons.lang3', 'org.bukkit.craftbukkit.libs.org.apache.commons.lang3'
+    relocate 'org.objectweb.asm', 'org.bukkit.craftbukkit.libs.org.objectweb.asm'
+    relocate('org.bukkit.craftbukkit', "org.bukkit.craftbukkit.v${project.nms_revision}"){
+        exclude 'org.bukkit.craftbukkit.Main*'
+    }
+    relocate 'net.minecraft.server', "net.minecraft.server.v${project.nms_revision}"
+    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
+}
+
+assemble.dependsOn(shadowJar)
+
+test {
+    exclude "org/bukkit/craftbukkit/inventory/ItemStack*Test.class"
+}
diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
index 3b9b44851c5832a3660a73449b52478c73ffb23a..829193bbdecd5564301b7210756815ca9d8725e1 100644
--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -1,5 +1,6 @@
 package com.destroystokyo.paper;
 
+import com.ishland.hotpur.server.HotpurVersioning;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.file.YamlConfiguration;
@@ -595,7 +596,7 @@ public class Metrics {
 
                 metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
                 metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : (PaperConfig.isProxyOnlineMode() ? "bungee" : "offline"))); // Purpur
-                metrics.addCustomChart(new Metrics.SimplePie("purpur_version", () -> (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown")); // Purpur
+                metrics.addCustomChart(new Metrics.SimplePie("purpur_version", () -> HotpurVersioning.implementationVersion)); // Purpur
 
                 metrics.addCustomChart(new Metrics.DrilldownPie("java_version", () -> {
                     Map<String, Map<String, Integer>> map = new HashMap<>();
diff --git a/src/main/java/com/destroystokyo/paper/console/PaperConsole.java b/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
index c1280478ee4565003883df9607d4a8a0e8fe4faa..fa77c96596b3c91c6a73978705c597702ccb793a 100644
--- a/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
+++ b/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
@@ -17,7 +17,7 @@ public final class PaperConsole extends SimpleTerminalConsole {
     @Override
     protected LineReader buildReader(LineReaderBuilder builder) {
         return super.buildReader(builder
-                .appName("Purpur") // Purpur
+                .appName("Hotpur") // Purpur // Hotpur
                 .variable(LineReader.HISTORY_FILE, java.nio.file.Paths.get(".console_history"))
                 .completer(new ConsoleCommandCompleter(this.server))
         );
diff --git a/src/main/java/com/ishland/hotpur/server/HotpurVersionFetcher.java b/src/main/java/com/ishland/hotpur/server/HotpurVersionFetcher.java
new file mode 100644
index 0000000000000000000000000000000000000000..0d88d60d041408c32edfb0b326da42a377354dd6
--- /dev/null
+++ b/src/main/java/com/ishland/hotpur/server/HotpurVersionFetcher.java
@@ -0,0 +1,94 @@
+package com.ishland.hotpur.server;
+
+import com.destroystokyo.paper.VersionHistoryManager;
+import com.destroystokyo.paper.util.VersionFetcher;
+import com.google.common.base.Charsets;
+import com.google.gson.Gson;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSyntaxException;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+
+public class HotpurVersionFetcher implements VersionFetcher {
+
+    @Override
+    public long getCacheTime() {
+        return 3600000;
+    }
+
+    @Nonnull
+    @Override
+    public String getVersionMessage(@Nonnull String serverVersion) {
+        String[] parts = serverVersion.substring("git-Hotpur-".length()).split("[_\\s]");
+        String updateMessage = getUpdateStatusMessage("ishlandbukkit/Hotpur", parts[0], parts[2]);
+        String history = getHistory();
+        return history != null ? history + "\n" + updateMessage : updateMessage;
+    }
+
+    private String getUpdateStatusMessage(String repo, String branch, String versionInfo) {
+        int distance = fetchDistanceFromGitHub(repo, branch, versionInfo);
+
+        switch (distance) {
+            case -1:
+                return "Error obtaining version information";
+            case 0:
+                return "You are running the latest version";
+            case -2:
+                return "\u00AF\\_(\u30C4)_/\u00AF";
+            default:
+                return "You are " + distance + " version(s) behind";
+        }
+    }
+
+    // Contributed by Techcable <Techcable@outlook.com> in GH-65
+    // from PaperVersionFetcher
+    private static int fetchDistanceFromGitHub(@Nonnull String repo, @Nonnull String branch, @Nonnull String hash) {
+        if(hash.endsWith(".dirty")) return -2;
+        try {
+            HttpURLConnection connection = (HttpURLConnection) new URL("https://api.github.com/repos/" + repo + "/compare/" + branch + "..." + hash).openConnection();
+            connection.connect();
+            if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) return -2; // Unknown commit
+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {
+                JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
+                String status = obj.get("status").getAsString();
+                switch (status) {
+                    case "identical":
+                        return 0;
+                    case "behind":
+                        return obj.get("behind_by").getAsInt();
+                    default:
+                        return -1;
+                }
+            } catch (JsonSyntaxException | NumberFormatException e) {
+                e.printStackTrace();
+                return -1;
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+            return -1;
+        }
+    }
+
+    // from PaperVersionFetcher
+    @Nullable
+    private String getHistory() {
+        final VersionHistoryManager.VersionData data = VersionHistoryManager.INSTANCE.getVersionData();
+        if (data == null) {
+            return null;
+        }
+
+        final String oldVersion = data.getOldVersion();
+        if (oldVersion == null) {
+            return null;
+        }
+
+        return "Previous version: " + oldVersion;
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/com/ishland/hotpur/server/HotpurVersioning.java b/src/main/java/com/ishland/hotpur/server/HotpurVersioning.java
new file mode 100644
index 0000000000000000000000000000000000000000..d23e23635b902c89b7bb059f0731894216ab6f6f
--- /dev/null
+++ b/src/main/java/com/ishland/hotpur/server/HotpurVersioning.java
@@ -0,0 +1,38 @@
+package com.ishland.hotpur.server;
+
+import com.google.common.base.Preconditions;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Properties;
+
+public class HotpurVersioning {
+
+    public static final String implementationVersion;
+    public static final String specificationVersion;
+    public static final Date buildTime;
+
+    static {
+        Properties properties = new Properties();
+        try (final InputStream in = HotpurVersioning.class.getClassLoader().getResourceAsStream("version.properties")) {
+            properties.load(in);
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+        implementationVersion = properties.getProperty("ImplementationVersion");
+        specificationVersion = properties.getProperty("SpecificationVersion");
+        try {
+            buildTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'").parse(properties.getProperty("BuildTime"));
+        } catch (ParseException e) {
+            throw new RuntimeException(e);
+        }
+        Preconditions.checkNotNull(implementationVersion);
+        Preconditions.checkNotNull(specificationVersion);
+        Preconditions.checkNotNull(buildTime);
+    }
+
+}
diff --git a/src/main/java/net/pl3x/purpur/PurpurConfig.java b/src/main/java/net/pl3x/purpur/PurpurConfig.java
index 7e0078e9c989fa0abf0eafc822eb3b81e9388c07..b5ff09f330abc9fb1a2ca859a4603735ba907a41 100644
--- a/src/main/java/net/pl3x/purpur/PurpurConfig.java
+++ b/src/main/java/net/pl3x/purpur/PurpurConfig.java
@@ -180,7 +180,7 @@ public class PurpurConfig {
         if (!TimingsManager.hiddenConfigs.contains("settings.seed.end-spike")) TimingsManager.hiddenConfigs.add("settings.seed.end-spike");
     }
 
-    public static String serverModName = "Purpur";
+    public static String serverModName = "Hotpur"; // Hotpur
     private static void serverModName() {
         serverModName = getString("settings.server-mod-name", serverModName);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index b3bc2d908a028fe182f4be2ed4d2bb6a1e9ec5cb..d000a94e9eb40e5ea6831863221d80521e2f609b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -8,6 +8,7 @@ import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
 import com.google.common.collect.MapMaker;
+import com.ishland.hotpur.server.HotpurVersioning;
 import com.mojang.authlib.GameProfile;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
@@ -232,7 +233,7 @@ import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
 
 public final class CraftServer implements Server {
-    private final String serverName = "Purpur"; // Paper // Tuinity // Purpur
+    private final String serverName = "Hotpur"; // Paper // Tuinity // Purpur // Hotpur
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
@@ -284,7 +285,7 @@ public final class CraftServer implements Server {
                 return player.getBukkitEntity();
             }
         }));
-        this.serverVersion = CraftServer.class.getPackage().getImplementationVersion();
+        this.serverVersion = HotpurVersioning.implementationVersion;
 
         Bukkit.setServer(this);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index a5394b04a6406323fe0f69c27b07fff4ffc14224..f058ac5c16c6317a0d9b8a9e34c9783fb1f99b1a 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -10,6 +10,8 @@ import java.util.List;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
+import com.ishland.hotpur.server.HotpurVersioning;
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
 import net.minecrell.terminalconsole.TerminalConsoleAppender; // Paper
@@ -210,7 +212,7 @@ public class Main {
                 Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
             }
         } else if (options.has("v")) {
-            System.out.println(CraftServer.class.getPackage().getImplementationVersion());
+            System.out.println(HotpurVersioning.implementationVersion);
         } else {
             // Do you love Java using + and ! as string based identifiers? I sure do!
             String path = new File(".").getAbsolutePath();
@@ -259,12 +261,10 @@ public class Main {
                     System.setProperty(TerminalConsoleAppender.JLINE_OVERRIDE_PROPERTY, "false"); // Paper
                 }
 
-                if (false) { // Main.class.getPackage().getImplementationVendor() != null && System.getProperty("IReallyKnowWhatIAmDoingISwear") == null) { // Purpur
-                    Date buildDate = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'").parse(Main.class.getPackage().getImplementationVendor()); // Paper
-
+                if (System.getProperty("IReallyKnowWhatIAmDoingISwear") == null) { // Purpur // Hotpur
                     Calendar deadline = Calendar.getInstance();
-                    deadline.add(Calendar.DAY_OF_YEAR, -28);
-                    if (buildDate.before(deadline.getTime())) {
+                    deadline.add(Calendar.DAY_OF_YEAR, -1);
+                    if (HotpurVersioning.buildTime.before(deadline.getTime())) {
                         // Paper start - This is some stupid bullshit
                         System.err.println("*** Warning, you've not updated in a while! ***");
                         System.err.println("*** Please download a new build ***"); // Paper // Tuinity
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 65a85f226822bb2b7f9a3a67654d3f40d7c4bfa2..3ee4e52f5dd86e647669dc81dc98c62c44656e0a 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -353,7 +353,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     @Override
     public com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
-        return new net.pl3x.purpur.PurpurVersionFetcher();
+        return new com.ishland.hotpur.server.HotpurVersionFetcher();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
index 13b98439320ac1401a920c01d7cf5a4b3a23deff..f17006ac97019afe6825f19a2c46e9258a6ecd03 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
@@ -2,15 +2,21 @@ package org.bukkit.craftbukkit.util;
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
 import java.util.Properties;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
+import com.ishland.hotpur.server.HotpurVersioning;
+import org.apache.commons.io.IOUtils;
 import org.bukkit.Bukkit;
 
 public final class Versioning {
     public static String getBukkitVersion() {
-        String result = "Unknown-Version";
+        String result = HotpurVersioning.specificationVersion;
 
+        // Hotpur - replace impl
+        /*
         InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/net.pl3x.purpur/purpur-api/pom.properties"); // Tuinity // Purpur
         Properties properties = new Properties();
 
@@ -23,7 +29,9 @@ public final class Versioning {
                 Logger.getLogger(Versioning.class.getName()).log(Level.SEVERE, "Could not get Bukkit version!", ex);
             }
         }
+        */
 
         return result;
+        // Hotpur end
     }
 }
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
index 8af159abd3d0cc94cf155fec5b384c42f69551bf..cc9da9e3804d3703355ee08532c51ad56d952f85 100644
--- a/src/main/resources/log4j2.xml
+++ b/src/main/resources/log4j2.xml
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<Configuration status="WARN" packages="com.mojang.util" shutdownHook="disable">
+<Configuration status="FATAL" packages="com.mojang.util" shutdownHook="disable">
     <Appenders>
         <Queue name="ServerGuiConsole">
             <PatternLayout pattern="[%d{HH:mm:ss} %level]: %msg%n" />
diff --git a/src/test/java/org/bukkit/support/DummyServer.java b/src/test/java/org/bukkit/support/DummyServer.java
index 886e462defb4bd15063e4a1ce04fd7bb0df75b2a..04c8d985fa83c9aed9c8bf077c37733213077ce4 100644
--- a/src/test/java/org/bukkit/support/DummyServer.java
+++ b/src/test/java/org/bukkit/support/DummyServer.java
@@ -5,6 +5,8 @@ import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 import java.util.HashMap;
 import java.util.logging.Logger;
+
+import com.ishland.hotpur.server.HotpurVersioning;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
@@ -46,7 +48,7 @@ public final class DummyServer implements InvocationHandler {
                     new MethodHandler() {
                         @Override
                         public Object handle(DummyServer server, Object[] args) {
-                            return DummyServer.class.getPackage().getImplementationVersion();
+                            return HotpurVersioning.implementationVersion;
                         }
                     }
                 );
